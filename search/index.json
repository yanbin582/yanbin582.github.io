[{"content":"1.快速入门MybaitsPlus 快速开始 比如我们要实现User表的CRUD，只需要下面几步：\n引入MybatisPlus依赖 定义Mapper 引入依赖 MybatisPlus提供了starter，实现了自动Mybatis以及MybatisPlus的自动装配功能，坐标如下：\n1 2 3 4 5 \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.baomidou\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mybatis-plus-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.5.3.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 由于这个starter包含对mybatis的自动装配，因此完全可以替换掉Mybatis的starter。\n定义Mapper 为了简化单表CRUD，MybatisPlus提供了一个基础的BaseMapper接口，其中已经实现了单表的CRUD：\n因此我们自定义的Mapper只要实现了这个BaseMapper，就无需自己实现单表CRUD了。 修改mp-demo中的com.itheima.mp.mapper包下的UserMapper接口，让其继承BaseMapper：\n代码如下：\n1 2 3 4 5 6 7 package com.itheima.mp.mapper; import com.baomidou.mybatisplus.core.mapper.BaseMapper; import com.itheima.mp.domain.po.User; public interface UserMapper extends BaseMapper\u0026lt;User\u0026gt; { } 测试 新建一个测试类，编写几个单元测试，测试基本的CRUD功能：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 @SpringBootTest class UserMapperTest { @Autowired private UserMapper userMapper; @Test void testInsert() { User user = new User(); user.setId(5L); user.setUsername(\u0026#34;Lucy\u0026#34;); user.setPassword(\u0026#34;123\u0026#34;); user.setPhone(\u0026#34;18688990011\u0026#34;); user.setBalance(200); user.setInfo(\u0026#34;{\\\u0026#34;age\\\u0026#34;: 24, \\\u0026#34;intro\\\u0026#34;: \\\u0026#34;英文老师\\\u0026#34;, \\\u0026#34;gender\\\u0026#34;: \\\u0026#34;female\\\u0026#34;}\u0026#34;); user.setCreateTime(LocalDateTime.now()); user.setUpdateTime(LocalDateTime.now()); userMapper.insert(user); } @Test void testSelectById() { User user = userMapper.selectById(5L); System.out.println(\u0026#34;user = \u0026#34; + user); } @Test void testSelectByIds() { List\u0026lt;User\u0026gt; users = userMapper.selectBatchIds(List.of(1L, 2L, 3L, 4L, 5L)); users.forEach(System.out::println); } @Test void testUpdateById() { User user = new User(); user.setId(5L); user.setBalance(20000); userMapper.updateById(user); } @Test void testDelete() { userMapper.deleteById(5L); } } 只需要继承BaseMapper就能省去所有的单表CRUD，是不是非常简单！\n2.1****常见注解 在刚刚的入门案例中，我们仅仅引入了依赖，继承了BaseMapper就能使用MybatisPlus，非常简单。但是问题来了： MybatisPlus如何知道我们要查询的是哪张表？表中有哪些字段呢？\n大家回忆一下，UserMapper在继承BaseMapper的时候指定了一个泛型：\n泛型中的User就是与数据库对应的PO.\nMybatisPlus就是根据PO实体的信息来推断出表的信息，从而生成SQL的。默认情况下：\nMybatisPlus会把PO实体的类名驼峰转下划线作为表名 MybatisPlus会把PO实体的所有变量名驼峰转下划线作为表的字段名，并根据变量类型推断字段类型 MybatisPlus会把名为id的字段作为主键 但很多情况下，默认的实现与实际场景不符，因此MybatisPlus提供了一些注解便于我们声明表信息。\n**@**TableName 说明：\n描述：表名注解，标识实体类对应的表 使用位置：实体类 示例：\n1 2 3 4 5 @TableName(\u0026#34;user\u0026#34;) public class User { private Long id; private String name; } TableName注解除了指定表名以外，还可以指定很多其它属性：\n属性 类型 必须指定 默认值 描述 value String 否 \u0026quot;\u0026quot; 表名 schema String 否 \u0026quot;\u0026quot; schema keepGlobalPrefix boolean 否 false 是否保持使用全局的 tablePrefix 的值（当全局 tablePrefix 生效时） resultMap String 否 \u0026quot;\u0026quot; xml 中 resultMap 的 id（用于满足特定类型的实体类对象绑定） autoResultMap boolean 否 false 是否自动构建 resultMap 并使用（如果设置 resultMap 则不会进行 resultMap 的自动构建与注入） excludeProperty String[] 否 {} 需要排除的属性名 @since 3.3.1 @TableId 说明：\n描述：主键注解，标识实体类中的主键字段 使用位置：实体类的主键字段 示例：\n1 2 3 4 5 6 @TableName(\u0026#34;user\u0026#34;) public class User { @TableId private Long id; private String name; } TableId注解支持两个属性：\n属性 类型 必须指定 默认值 描述 value String 否 \u0026quot;\u0026quot; 表名 type Enum 否 IdType.NONE 指定主键类型 IdType支持的类型有：\n值 描述 AUTO 数据库 ID 自增 NONE 无状态，该类型为未设置主键类型（注解里等于跟随全局，全局里约等于 INPUT） INPUT insert 前自行 set 主键值 ASSIGN_ID 分配 ID(主键类型为 Number(Long 和 Integer)或 String)(since 3.3.0),使用接口IdentifierGenerator的方法nextId(默认实现类为DefaultIdentifierGenerator雪花算法) ASSIGN_UUID 分配 UUID,主键类型为 String(since 3.3.0),使用接口IdentifierGenerator的方法nextUUID(默认 default 方法) ID_WORKER 分布式全局唯一 ID 长整型类型(please use ASSIGN_ID) UUID 32 位 UUID 字符串(please use ASSIGN_UUID) ID_WORKER_STR 分布式全局唯一 ID 字符串类型(please use ASSIGN_ID) 这里比较常见的有三种：\nAUTO：利用数据库的id自增长 INPUT：手动生成id ASSIGN_ID：雪花算法生成Long类型的全局唯一id，这是默认的ID策略 @TableField 说明：\n描述：普通字段注解\n示例：\n1 2 3 4 5 6 7 8 9 10 11 @TableName(\u0026#34;user\u0026#34;) public class User { @TableId private Long id; private String name; private Integer age; @TableField(is_married\u0026#34;) private Boolean isMarried; @TableField(\u0026#34;`concat`\u0026#34;) private String concat; } 一般情况下我们并不需要给字段添加@TableField注解，一些特殊情况除外：\n成员变量名与数据库字段名不一致 成员变量是以isXXX命名，按照JavaBean的规范，MybatisPlus识别字段时会把is去除，这就导致与数据库不符。 成员变量名与数据库一致，但是与数据库的关键字冲突。使用@TableField注解给字段名添加转义字符：```` 支持的其它属性如下：\n属性 类型 必填 默认值 描述 value String 否 \u0026quot;\u0026quot; 数据库字段名 exist boolean 否 true 是否为数据库表字段 condition String 否 \u0026quot;\u0026quot; 字段 where 实体查询比较条件，有值设置则按设置的值为准，没有则为默认全局的 %s=#{%s}，参考(opens new window) update String 否 \u0026quot;\u0026quot; 字段 update set 部分注入，例如：当在version字段上注解update=\u0026quot;%s+1\u0026quot; 表示更新时会 set version=version+1 （该属性优先级高于 el 属性） insertStrategy Enum 否 FieldStrategy.DEFAULT 举例：NOT_NULL insert into table_a(column) values (#{columnProperty}) updateStrategy Enum 否 FieldStrategy.DEFAULT 举例：IGNORED update table_a set column=#{columnProperty} whereStrategy Enum 否 FieldStrategy.DEFAULT 举例：NOT_EMPTY where column=#{columnProperty} fill Enum 否 FieldFill.DEFAULT 字段自动填充策略 select boolean 否 true 是否进行 select 查询 keepGlobalFormat boolean 否 false 是否保持使用全局的 format 进行处理 jdbcType JdbcType 否 JdbcType.UNDEFINED JDBC 类型 (该默认值不代表会按照该值生效) typeHandler TypeHander 否 类型处理器 (该默认值不代表会按照该值生效) numericScale String 否 \u0026quot;\u0026quot; 指定小数点后保留的位数 常见配置 MybatisPlus也支持基于yaml文件的自定义配置，详见官方文档：\nhttps://baomidou.com/reference/\n大多数的配置都有默认值，因此我们都无需配置。但还有一些是没有默认值的，例如:\n实体类的别名扫描包 全局id类型 1 2 3 4 5 mybatis-plus: type-aliases-package: com.itheima.mp.domain.po global-config: db-config: id-type: auto # 全局id类型为自增长 需要注意的是，MyBatisPlus也支持手写SQL的，而mapper文件的读取地址可以自己配置：\n1 2 mybatis-plus: mapper-locations: \u0026#34;classpath*:/mapper/**/*.xml\u0026#34; # Mapper.xml文件地址，当前这个是默认值。 可以看到默认值是classpath*:/mapper/**/*.xml，也就是说我们只要把mapper.xml文件放置这个目录下就一定会被加载。\n例如，我们新建一个UserMapper.xml文件：\n然后在其中定义一个方法：\n1 2 3 4 5 6 7 8 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE mapper PUBLIC \u0026#34;-//mybatis.org//DTD Mapper 3.0//EN\u0026#34; \u0026#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd\u0026#34;\u0026gt; \u0026lt;mapper namespace=\u0026#34;com.itheima.mp.mapper.UserMapper\u0026#34;\u0026gt; \u0026lt;select id=\u0026#34;queryById\u0026#34; resultType=\u0026#34;User\u0026#34;\u0026gt; SELECT * FROM user WHERE id = #{id} \u0026lt;/select\u0026gt; \u0026lt;/mapper\u0026gt; 然后在测试类UserMapperTest中测试该方法：\n1 2 3 4 5 @Test void testQuery() { User user = userMapper.queryById(1L); System.out.println(\u0026#34;user = \u0026#34; + user); } 2.核心功能 刚才的案例中都是以id为条件的简单CRUD，一些复杂条件的SQL语句就要用到一些更高级的功能了。\n条件构造器 除了新增以外，修改、删除、查询的SQL语句都需要指定where条件。因此BaseMapper中提供的相关方法除了以id作为where条件以外，还支持更加复杂的where条件。\n参数中的Wrapper就是条件构造的抽象类，其下有很多默认实现，继承关系如图：\nWrapper的子类AbstractWrapper提供了where中包含的所有条件构造方法：\n而QueryWrapper在AbstractWrapper的基础上拓展了一个select方法，允许指定查询字段：\n而UpdateWrapper在AbstractWrapper的基础上拓展了一个set方法，允许指定SQL中的SET部分：\n接下来，我们就来看看如何利用Wrapper实现复杂查询。\nQueryWrapper 无论是修改、删除、查询，都可以使用QueryWrapper来构建查询条件。接下来看一些例子： 查询：查询出名字中带o的，存款大于等于1000元的人。代码如下：\n1 2 3 4 5 6 7 8 9 10 11 @Test void testQueryWrapper() { // 1.构建查询条件 where name like \u0026#34;%o%\u0026#34; AND balance \u0026gt;= 1000 QueryWrapper\u0026lt;User\u0026gt; wrapper = new QueryWrapper\u0026lt;User\u0026gt;() .select(\u0026#34;id\u0026#34;, \u0026#34;username\u0026#34;, \u0026#34;info\u0026#34;, \u0026#34;balance\u0026#34;) .like(\u0026#34;username\u0026#34;, \u0026#34;o\u0026#34;) .ge(\u0026#34;balance\u0026#34;, 1000); // 2.查询数据 List\u0026lt;User\u0026gt; users = userMapper.selectList(wrapper); users.forEach(System.out::println); } 更新：更新用户名为jack的用户的余额为2000，代码如下：\n1 2 3 4 5 6 7 8 9 @Test void testUpdateByQueryWrapper() { // 1.构建查询条件 where name = \u0026#34;Jack\u0026#34; QueryWrapper\u0026lt;User\u0026gt; wrapper = new QueryWrapper\u0026lt;User\u0026gt;().eq(\u0026#34;username\u0026#34;, \u0026#34;Jack\u0026#34;); // 2.更新数据，user中非null字段都会作为set语句 User user = new User(); user.setBalance(2000); userMapper.update(user, wrapper); } UpdateWrapper 基于BaseMapper中的update方法更新时只能直接赋值，对于一些复杂的需求就难以实现。 例如：更新id为1,2,4的用户的余额，扣200，对应的SQL应该是：\n1 UPDATE user SET balance = balance - 200 WHERE id in (1, 2, 4) SET的赋值结果是基于字段现有值的，这个时候就要利用UpdateWrapper中的setSql功能了：\n1 2 3 4 5 6 7 8 9 10 11 @Test void testUpdateWrapper() { List\u0026lt;Long\u0026gt; ids = List.of(1L, 2L, 4L); // 1.生成SQL UpdateWrapper\u0026lt;User\u0026gt; wrapper = new UpdateWrapper\u0026lt;User\u0026gt;() .setSql(\u0026#34;balance = balance - 200\u0026#34;) // SET balance = balance - 200 .in(\u0026#34;id\u0026#34;, ids); // WHERE id in (1, 2, 4) // 2.更新，注意第一个参数可以给null，也就是不填更新字段和数据， // 而是基于UpdateWrapper中的setSQL来更新 userMapper.update(null, wrapper); } ****LambdaQueryWrapper 无论是QueryWrapper还是UpdateWrapper在构造条件的时候都需要写死字段名称，会出现字符串魔法值。这在编程规范中显然是不推荐的。 那怎么样才能不写字段名，又能知道字段名呢？\n其中一种办法是基于变量的gettter方法结合反射技术。因此我们只要将条件对应的字段的getter方法传递给MybatisPlus，它就能计算出对应的变量名了。而传递方法可以使用JDK8中的方法引用和Lambda表达式。 因此MybatisPlus又提供了一套基于Lambda的Wrapper，包含两个：\nLambdaQueryWrapper LambdaUpdateWrapper 分别对应QueryWrapper和UpdateWrapper\n其使用方式如下：\n1 2 3 4 5 6 7 8 9 10 11 12 @Test void testLambdaQueryWrapper() { // 1.构建条件 WHERE username LIKE \u0026#34;%o%\u0026#34; AND balance \u0026gt;= 1000 QueryWrapper\u0026lt;User\u0026gt; wrapper = new QueryWrapper\u0026lt;\u0026gt;(); wrapper.lambda() .select(User::getId, User::getUsername, User::getInfo, User::getBalance) .like(User::getUsername, \u0026#34;o\u0026#34;) .ge(User::getBalance, 1000); // 2.查询 List\u0026lt;User\u0026gt; users = userMapper.selectList(wrapper); users.forEach(System.out::println); } 自定义SQL** ","date":"2024-10-11T00:00:00Z","image":"https://yanbin582.github.io/p/mybatisplus/Snipaste_2025-03-22_13-53-41_hu13533275287591799937.png","permalink":"https://yanbin582.github.io/p/mybatisplus/","title":"MybatisPlus"},{"content":"Markdown 基本语法 Markdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia、简书等。\n在线体验一下 Markdown在线编辑器 (opens new window)。\n千万不要被「标记」、「语言」吓到，Markdown的语法十分简单，常用的标记符号不超过十个，用于日常写作记录绰绰有余，不到半小时就能完全掌握。\n就是这十个不到的标记符号，却能让人优雅地沉浸式记录，专注内容而不是纠结排版，达到「心中无尘，码字入神」的境界。\nMarkdown 标题语法 要创建标题，请在单词或短语前面添加井号 (#) 。# 的数量代表了标题的级别。例如，添加三个 # 表示创建一个三级标题 (\u0026lt;h3\u0026gt;) (例如：### My Header)。\nMarkdown语法 HTML 预览效果 # Heading level 1 \u0026lt;h1\u0026gt;Heading level 1\u0026lt;/h1\u0026gt; Heading level 1 ## Heading level 2 \u0026lt;h2\u0026gt;Heading level 2\u0026lt;/h2\u0026gt; Heading level 2 ### Heading level 3 \u0026lt;h3\u0026gt;Heading level 3\u0026lt;/h3\u0026gt; Heading level 3 #### Heading level 4 \u0026lt;h4\u0026gt;Heading level 4\u0026lt;/h4\u0026gt; Heading level 4 ##### Heading level 5 \u0026lt;h5\u0026gt;Heading level 5\u0026lt;/h5\u0026gt; Heading level 5 ###### Heading level 6 \u0026lt;h6\u0026gt;Heading level 6\u0026lt;/h6\u0026gt; Heading level 6 #可选语法 还可以在文本下方添加任意数量的 == 号来标识一级标题，或者 \u0026ndash; 号来标识二级标题。\nMarkdown语法 HTML 预览效果 Heading level 1=============== \u0026lt;h1\u0026gt;Heading level 1\u0026lt;/h1\u0026gt; Heading level 1 Heading level 2--------------- \u0026lt;h2\u0026gt;Heading level 2\u0026lt;/h2\u0026gt; Heading level 2 #最佳实践 不同的 Markdown 应用程序处理 # 和标题之间的空格方式并不一致。为了兼容考虑，请用一个空格在 # 和标题之间进行分隔。\n✅ Do this ❌ Don\u0026rsquo;t do this # Here's a Heading #Here's a Heading Markdown 段落 要创建段落，请使用空白行将一行或多行文本进行分隔。\nMarkdown语法 HTML 预览效果 I really like using Markdown.I think I'll use it to format all of my documents from now on. \u0026lt;p\u0026gt;I really like using Markdown.\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;I think I'll use it to format all of my documents from now on.\u0026lt;/p\u0026gt; I really like using Markdown.I think I\u0026rsquo;ll use it to format all of my documents from now on. #段落（Paragraph）用法的最佳实 不要用空格（spaces）或制表符（ tabs）缩进段落。\n✅ Do this ❌ Don\u0026rsquo;t do this Don't put tabs or spaces in front of your paragraphs.Keep lines left-aligned like this. This can result in unexpected formatting problems. Don't add tabs or spaces in front of paragraphs. Markdown 换行语法 在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行(\u0026lt;br\u0026gt;)。\nMarkdown语法 HTML 预览效果 This is the first line. And this is the second line. \u0026lt;p\u0026gt;This is the first line.\u0026lt;br\u0026gt;And this is the second line.\u0026lt;/p\u0026gt; This is the first line. And this is the second line. #换行（Line Break）用法的最佳实践 几乎每个 Markdown 应用程序都支持两个或多个空格进行换行，称为 结尾空格（trailing whitespace) 的方式，但这是有争议的，因为很难在编辑器中直接看到空格，并且很多人在每个句子后面都会有意或无意地添加两个空格。由于这个原因，你可能要使用除结尾空格以外的其它方式来换行。幸运的是，几乎每个 Markdown 应用程序都支持另一种换行方式：HTML 的 \u0026lt;br\u0026gt; 标签。\n为了兼容性，请在行尾添加“结尾空格”或 HTML 的 \u0026lt;br\u0026gt; 标签来实现换行。\n还有两种其他方式我并不推荐使用。CommonMark 和其它几种轻量级标记语言支持在行尾添加反斜杠 (\\) 的方式实现换行，但是并非所有 Markdown 应用程序都支持此种方式，因此从兼容性的角度来看，不推荐使用。并且至少有两种轻量级标记语言支持无须在行尾添加任何内容，只须键入回车键（return）即可实现换行。\n✅ Do this ❌ Don\u0026rsquo;t do this First line with two spaces after. And the next line.First line with the HTML tag after.\u0026lt;br\u0026gt;And the next line. First line with a backslash after.\\And the next line.First line with nothing after.And the next line. Markdown 强调语法 通过将文本设置为粗体或斜体来强调其重要性。\n#粗体（Bold） 要加粗文本，请在单词或短语的前后各添加两个星号（asterisks）或下划线（underscores）。如需加粗一个单词或短语的中间部分用以表示强调的话，请在要加粗部分的两侧各添加两个星号（asterisks）。\nMarkdown语法 HTML 预览效果 I just love **bold text**. I just love \u0026lt;strong\u0026gt;bold text\u0026lt;/strong\u0026gt;. I just love bold text. I just love __bold text__. I just love \u0026lt;strong\u0026gt;bold text\u0026lt;/strong\u0026gt;. I just love bold text. Love**is**bold Love\u0026lt;strong\u0026gt;is\u0026lt;/strong\u0026gt;bold Loveisbold #粗体（Bold）用法最佳实践 Markdown 应用程序在如何处理单词或短语中间的下划线上并不一致。为兼容考虑，在单词或短语中间部分加粗的话，请使用星号（asterisks）。\n✅ Do this ❌ Don\u0026rsquo;t do this Love**is**bold Love__is__bold #斜体（Italic） 要用斜体显示文本，请在单词或短语前后添加一个星号（asterisk）或下划线（underscore）。要斜体突出单词的中间部分，请在字母前后各添加一个星号，中间不要带空格。\nMarkdown语法 HTML 预览效果 Italicized text is the *cat's meow*. Italicized text is the \u0026lt;em\u0026gt;cat's meow\u0026lt;/em\u0026gt;. Italicized text is the cat’s meow. Italicized text is the _cat's meow_. Italicized text is the \u0026lt;em\u0026gt;cat's meow\u0026lt;/em\u0026gt;. Italicized text is the cat’s meow. A*cat*meow A\u0026lt;em\u0026gt;cat\u0026lt;/em\u0026gt;meow Acatmeow #斜体（Italic）用法的最佳实践 要同时用粗体和斜体突出显示文本，请在单词或短语的前后各添加三个星号或下划线。要加粗并用斜体显示单词或短语的中间部分，请在要突出显示的部分前后各添加三个星号，中间不要带空格。\n✅ Do this ❌ Don\u0026rsquo;t do this A*cat*meow A_cat_meow #粗体（Bold）和斜体（Italic） 要同时用粗体和斜体突出显示文本，请在单词或短语的前后各添加三个星号或下划线。要加粗并用斜体显示单词或短语的中间部分，请在要突出显示的部分前后各添加三个星号，中间不要带空格。\nMarkdown语法 HTML 预览效果 This text is ***really important***. This text is \u0026lt;strong\u0026gt;\u0026lt;em\u0026gt;really important\u0026lt;/em\u0026gt;\u0026lt;/strong\u0026gt;. This text is *really important*. This text is ___really important___. This text is \u0026lt;strong\u0026gt;\u0026lt;em\u0026gt;really important\u0026lt;/em\u0026gt;\u0026lt;/strong\u0026gt;. This text is *really important*. This text is __*really important*__. This text is \u0026lt;strong\u0026gt;\u0026lt;em\u0026gt;really important\u0026lt;/em\u0026gt;\u0026lt;/strong\u0026gt;. This text is *really important*. This text is **_really important_**. This text is \u0026lt;strong\u0026gt;\u0026lt;em\u0026gt;really important\u0026lt;/em\u0026gt;\u0026lt;/strong\u0026gt;. This text is *really important*. This is really***very***important text. This is really\u0026lt;strong\u0026gt;\u0026lt;em\u0026gt;very\u0026lt;/em\u0026gt;\u0026lt;/strong\u0026gt;important text. This is really***very***important text. #粗体（Bold）和斜体（Italic）用法的最佳实践 Markdown 应用程序在处理单词或短语中间添加的下划线上并不一致。为了实现兼容性，请使用星号将单词或短语的中间部分加粗并以斜体显示，以示重要。\n✅ Do this ❌ Don\u0026rsquo;t do this This is really***very***important text. This is really___very___important text. Markdown 引用语法 要创建块引用，请在段落前添加一个 \u0026gt; 符号。\n1 \u0026gt; Dorothy followed her through many of the beautiful rooms in her castle. 渲染效果如下所示：\nDorothy followed her through many of the beautiful rooms in her castle.\n#多个段落的块引用 块引用可以包含多个段落。为段落之间的空白行添加一个 \u0026gt; 符号。\n1 2 3 \u0026gt; Dorothy followed her through many of the beautiful rooms in her castle. \u0026gt; \u0026gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood. 渲染效果如下：\nDorothy followed her through many of the beautiful rooms in her castle.\nThe Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n#嵌套块引用 块引用可以嵌套。在要嵌套的段落前添加一个 \u0026gt;\u0026gt; 符号。\n1 2 3 \u0026gt; Dorothy followed her through many of the beautiful rooms in her castle. \u0026gt; \u0026gt;\u0026gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood. 渲染效果如下：\nDorothy followed her through many of the beautiful rooms in her castle.\nThe Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n#带有其它元素的块引用 块引用可以包含其他 Markdown 格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效。\n1 2 3 4 5 6 \u0026gt; #### The quarterly results look great! \u0026gt; \u0026gt; - Revenue was off the chart. \u0026gt; - Profits were higher than ever. \u0026gt; \u0026gt; *Everything* is going according to **plan**. 渲染效果如下：\nThe quarterly results look great! Revenue was off the chart. Profits were higher than ever. Everything is going according to plan.\nMarkdown 列表语法 可以将多个条目组织成有序或无序列表。\n#有序列表 要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。\nMarkdown语法 HTML 预览效果 1. First item2. Second item3. Third item4. Fourth item \u0026lt;ol\u0026gt;\u0026lt;li\u0026gt;First item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Second item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Third item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Fourth item\u0026lt;/li\u0026gt;\u0026lt;/ol\u0026gt; First itemSecond itemThird itemFourth item 1. First item1. Second item1. Third item1. Fourth item \u0026lt;ol\u0026gt;\u0026lt;li\u0026gt;First item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Second item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Third item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Fourth item\u0026lt;/li\u0026gt;\u0026lt;/ol\u0026gt; First itemSecond itemThird itemFourth item 1. First item8. Second item3. Third item5. Fourth item \u0026lt;ol\u0026gt;\u0026lt;li\u0026gt;First item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Second item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Third item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Fourth item\u0026lt;/li\u0026gt;\u0026lt;/ol\u0026gt; First itemSecond itemThird itemFourth item 1. First item2. Second item3. Third item 1. Indented item 2. Indented item4. Fourth item \u0026lt;ol\u0026gt;\u0026lt;li\u0026gt;First item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Second item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Third item\u0026lt;ol\u0026gt;\u0026lt;li\u0026gt;Indented item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Indented item\u0026lt;/li\u0026gt;\u0026lt;/ol\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Fourth item\u0026lt;/li\u0026gt;\u0026lt;/ol\u0026gt; First itemSecond itemThird itemIndented itemIndented itemFourth item #有序列表最佳实践 CommonMark and a few other lightweight markup languages let you use a parenthesis ()) as a delimiter (e.g., 1) First item), but not all Markdown applications support this, so it isn’t a great option from a compatibility perspective. For compatibility, use periods only.\n✅ Do this ❌ Don\u0026rsquo;t do this 1. First item2. Second item 1) First item2) Second item #无序列表 要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表。\nMarkdown语法 HTML 预览效果 - First item- Second item- Third item- Fourth item \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;First item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Second item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Third item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Fourth item\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt; First itemSecond itemThird itemFourth item * First item* Second item* Third item* Fourth item \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;First item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Second item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Third item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Fourth item\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt; First itemSecond itemThird itemFourth item + First item+ Second item+ Third item+ Fourth item \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;First item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Second item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Third item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Fourth item\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt; First itemSecond itemThird itemFourth item - First item- Second item- Third item - Indented item - Indented item- Fourth item \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;First item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Second item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Third item\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;Indented item\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Indented item\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;Fourth item\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt; First itemSecond itemThird itemIndented itemIndented itemFourth item #无序列表最佳实践 Markdown applications don’t agree on how to handle different delimiters in the same list. For compatibility, don\u0026rsquo;t mix and match delimiters in the same list — pick one and stick with it.\n✅ Do this ❌ Don\u0026rsquo;t do this - First item- Second item- Third item- Fourth item + First item* Second item- Third item+ Fourth item #在列表中嵌套其他元素 要在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符，如下例所示：\n#段落 1 2 3 4 5 6 * This is the first list item. * Here\u0026#39;s the second list item. I need to add another paragraph below the second list item. * And here\u0026#39;s the third list item. 渲染效果如下：\nThis is the first list item.\nHere\u0026rsquo;s the second list item.\nI need to add another paragraph below the second list item.\nAnd here\u0026rsquo;s the third list item.\n#引用块 1 2 3 4 5 6 * This is the first list item. * Here\u0026#39;s the second list item. \u0026gt; A blockquote would look great below the second list item. * And here\u0026#39;s the third list item. 渲染效果如下：\nThis is the first list item.\nHere\u0026rsquo;s the second list item.\nA blockquote would look great below the second list item.\nAnd here\u0026rsquo;s the third list item.\n#代码块 代码块通常采用四个空格或一个制表符缩进。当它们被放在列表中时，请将它们缩进八个空格或两个制表符。\n1 2 3 4 5 6 7 8 9 1. Open the file. 2. Find the following code block on line 21: \u0026amp;lt;html\u0026gt; \u0026amp;lt;head\u0026gt; \u0026amp;lt;title\u0026gt;Test\u0026amp;lt;/title\u0026gt; \u0026amp;lt;/head\u0026gt; 3. Update the title to match the name of your website. 渲染效果如下：\nOpen the file.\nFind the following code block on line 21:\n1 2 3 4 \u0026amp;lt;html\u0026gt; \u0026amp;lt;head\u0026gt; \u0026amp;lt;title\u0026gt;Test\u0026amp;lt;/title\u0026gt; \u0026amp;lt;/head\u0026gt; Update the title to match the name of your website.\n#图片 1 2 3 4 5 6 1. Open the file containing the Linux mascot. 2. Marvel at its beauty. ![Tux, the Linux mascot](/assets/images/tux.png) 3. Close the file. 渲染效果如下：\nOpen the file containing the Linux mascot.\nMarvel at its beauty.\nClose the file.\n#列表 You can nest an unordered list in an ordered list, or vice versa.\n1 2 3 4 5 6 1. First item 2. Second item 3. Third item - Indented item - Indented item 4. Fourth item 渲染效果如下：\nFirst item Second item Third item Indented item Indented item Fourth item Markdown 代码语法 要将单词或短语表示为代码，请将其包裹在反引号 (```) 中。\nMarkdown语法 HTML 预览效果 At the command prompt, type nano. At the command prompt, type \u0026lt;code\u0026gt;nano\u0026lt;/code\u0026gt;. At the command prompt, type nano. #转义反引号 如果你要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号(````)中。\nMarkdown语法 HTML 预览效果 Use `code` in your Markdown file. \u0026lt;code\u0026gt;Use code in your Markdown file.\u0026lt;/code\u0026gt; Use code in your Markdown file. #代码块 要创建代码块，请将代码块的每一行缩进至少四个空格或一个制表符。\n1 2 3 4 \u0026amp;lt;html\u0026gt; \u0026amp;lt;head\u0026gt; \u0026amp;lt;/head\u0026gt; \u0026amp;lt;/html\u0026gt; 渲染效果如下：\n1 2 3 4 \u0026amp;lt;html\u0026gt; \u0026amp;lt;head\u0026gt; \u0026amp;lt;/head\u0026gt; \u0026amp;lt;/html\u0026gt; Note: 要创建不用缩进的代码块，请使用 围栏式代码块（fenced code blocks）.\nMarkdown 分隔线语法 要创建分隔线，请在单独一行上使用三个或多个星号 (***)、破折号 (---) 或下划线 (___) ，并且不能包含其他内容。\n1 2 3 4 5 *** --- _________________ 以上三个分隔线的渲染效果看起来都一样：\n#分隔线（Horizontal Rule）用法最佳实践 为了兼容性，请在分隔线的前后均添加空白行。\n✅ Do this ❌ Don\u0026rsquo;t do this Try to put a blank line before...---...and after a horizontal rule. Without blank lines, this would be a heading.---Don't do this! Markdown 链接语法 链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。\n超链接Markdown语法代码：[超链接显示名](超链接地址 \u0026quot;超链接title\u0026quot;)\n对应的HTML代码：\u0026lt;a href=\u0026quot;超链接地址\u0026quot; title=\u0026quot;超链接title\u0026quot;\u0026gt;超链接显示名\u0026lt;/a\u0026gt;\n1 这是一个链接 [Markdown语法](https://markdown.com.cn)。 渲染效果如下：\n这是一个链接 Markdown语法 (opens new window)。\n#给链接增加 Title 链接title是当鼠标悬停在链接上时会出现的文字，这个title是可选的，它放在圆括号中链接地址后面，跟链接地址之间以空格分隔。\n1 这是一个链接 [Markdown语法](https://markdown.com.cn \u0026#34;最好的markdown教程\u0026#34;)。 渲染效果如下：\n这是一个链接 Markdown语法 (opens new window)。\n#网址和Email地址 使用尖括号可以很方便地把URL或者email地址变成可点击的链接。\n1 2 \u0026lt;https://markdown.com.cn\u0026gt; \u0026lt;fake@example.com\u0026gt; 渲染效果如下：\nhttps://markdown.com.cn(opens new window) fake@example.com\n#带格式化的链接 强调 链接, 在链接语法前后增加星号。 要将链接表示为代码，请在方括号中添加反引号。\n1 2 3 I love supporting the **[EFF](https://eff.org)**. This is the *[Markdown Guide](https://www.markdownguide.org)*. See the section on [`code`](#code). 渲染效果如下：\nI love supporting the EFF (opens new window). This is the Markdown Guide (opens new window). See the section on code.\n#引用类型链接 引用样式链接是一种特殊的链接，它使URL在Markdown中更易于显示和阅读。参考样式链接分为两部分：与文本保持内联的部分以及存储在文件中其他位置的部分，以使文本易于阅读。\n#链接的第一部分格式 引用类型的链接的第一部分使用两组括号进行格式设置。第一组方括号包围应显示为链接的文本。第二组括号显示了一个标签，该标签用于指向您存储在文档其他位置的链接。\n尽管不是必需的，可以在第一组和第二组括号之间包含一个空格。第二组括号中的标签不区分大小写，可以包含字母，数字，空格或标点符号。\n以下示例格式对于链接的第一部分效果相同：\n[hobbit-hole][1] [hobbit-hole] [1] #链接的第二部分格式 引用类型链接的第二部分使用以下属性设置格式：\n放在括号中的标签，其后紧跟一个冒号和至少一个空格（例如[label]:）。 链接的URL，可以选择将其括在尖括号中。 链接的可选标题，可以将其括在双引号，单引号或括号中。 以下示例格式对于链接的第二部分效果相同：\n[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle [1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle \u0026quot;Hobbit lifestyles\u0026quot; [1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle 'Hobbit lifestyles' [1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle (Hobbit lifestyles) [1]: \u0026lt;https://en.wikipedia.org/wiki/Hobbit#Lifestyle\u0026gt; \u0026quot;Hobbit lifestyles\u0026quot; [1]: \u0026lt;https://en.wikipedia.org/wiki/Hobbit#Lifestyle\u0026gt; 'Hobbit lifestyles' [1]: \u0026lt;https://en.wikipedia.org/wiki/Hobbit#Lifestyle\u0026gt; (Hobbit lifestyles) 可以将链接的第二部分放在Markdown文档中的任何位置。有些人将它们放在出现的段落之后，有些人则将它们放在文档的末尾（例如尾注或脚注）。\n#链接最佳实践 不同的 Markdown 应用程序处理URL中间的空格方式不一样。为了兼容性，请尽量使用%20代替空格。\n✅ Do this ❌ Don\u0026rsquo;t do this [link](https://www.example.com/my%20great%20page) [link](https://www.example.com/my great page) Markdown 图片语法 要添加图像，请使用感叹号 (!), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。\n插入图片Markdown语法代码：![图片alt](图片链接 \u0026quot;图片title\u0026quot;)。\n对应的HTML代码：\u0026lt;img src=\u0026quot;图片链接\u0026quot; alt=\u0026quot;图片alt\u0026quot; title=\u0026quot;图片title\u0026quot;\u0026gt;\n1 ![这是图片](/assets/img/philly-magic-garden.jpg \u0026#34;Magic Gardens\u0026#34;) 渲染效果如下：\n#链接图片 给图片增加链接，请将图像的Markdown 括在方括号中，然后将链接添加在圆括号中。\n1 [![沙漠中的岩石图片](/assets/img/shiprock.jpg \u0026#34;Shiprock\u0026#34;)](https://markdown.com.cn) 渲染效果如下：\nMarkdown 转义字符语法 要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 \\ 。\n1 \\* Without the backslash, this would be a bullet in an unordered list. 渲染效果如下：\n* Without the backslash, this would be a bullet in an unordered list.\n#可做转义的字符 以下列出的字符都可以通过使用反斜杠字符从而达到转义目的。\nCharacter Name \\ backslash ` backtick (see also escaping backticks in code) * asterisk _ underscore { } curly braces [ ] brackets ( ) parentheses # pound sign + plus sign - minus sign (hyphen) . dot ! exclamation mark | pipe (see also escaping pipe in tables) #特殊字符自动转义 在 HTML 文件中，有两个字符需要特殊处理： \u0026lt; 和 \u0026amp; 。 \u0026lt; 符号用于起始标签，\u0026amp; 符号则用于标记 HTML 实体，如果你只是想要使用这些符号，你必须要使用实体的形式，像是 \u0026lt; 和 \u0026amp;。\n\u0026amp; 符号其实很容易让写作网页文件的人感到困扰，如果你要打「AT\u0026amp;T」 ，你必须要写成「AT\u0026amp;T」 ，还得转换网址内的 \u0026amp; 符号，如果你要链接到：\n1 http://images.google.com/images?num=30\u0026amp;q=larry+bird 你必须要把网址转成：\n1 http://images.google.com/images?num=30\u0026amp;amp;q=larry+bird 才能放到链接标签的 href 属性里。不用说也知道这很容易忘记，这也可能是 HTML 标准检查所检查到的错误中，数量最多的。\nMarkdown 允许你直接使用这些符号，它帮你自动转义字符。如果你使用 \u0026amp; 符号的作为 HTML 实体的一部分，那么它不会被转换，而在其它情况下，它则会被转换成 \u0026amp;。所以你如果要在文件中插入一个著作权的符号，你可以这样写：\n1 \u0026amp;copy; Markdown 将不会对这段文字做修改，但是如果你这样写：\n1 AT\u0026amp;T Markdown 就会将它转为：\n1 AT\u0026amp;amp;T 类似的状况也会发生在 \u0026lt; 符号上，因为 Markdown 支持 行内 HTML ，如果你使用 \u0026lt; 符号作为 HTML 标签的分隔符，那 Markdown 也不会对它做任何转换，但是如果你是写：\n1 4 \u0026lt; 5 Markdown 将会把它转换为：\n1 4 \u0026amp;lt; 5 需要特别注意的是，在 Markdown 的块级元素和内联元素中， \u0026lt; 和 \u0026amp; 两个符号都会被自动转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML。（在 HTML 语法中，你要手动把所有的 \u0026lt; 和 \u0026amp; 都转换为 HTML 实体。）\nMarkdown 内嵌 HTML 标签 对于 Markdown 涵盖范围之外的标签，都可以直接在文件里面用 HTML 本身。如需使用 HTML，不需要额外标注这是 HTML 或是 Markdown，只需 HTML 标签添加到 Markdown 文本中即可。\n#行级內联标签 HTML 的行级內联标签如 \u0026lt;span\u0026gt;、\u0026lt;cite\u0026gt;、\u0026lt;del\u0026gt; 不受限制，可以在 Markdown 的段落、列表或是标题里任意使用。依照个人习惯，甚至可以不用 Markdown 格式，而采用 HTML 标签来格式化。例如：如果比较喜欢 HTML 的 \u0026lt;a\u0026gt; 或 \u0026lt;img\u0026gt; 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图片语法。当你需要更改元素的属性时（例如为文本指定颜色或更改图像的宽度），使用 HTML 标签更方便些。\nHTML 行级內联标签和区块标签不同，在內联标签的范围内， Markdown 的语法是可以解析的。\n1 This **word** is bold. This \u0026lt;em\u0026gt;word\u0026lt;/em\u0026gt; is italic. 渲染效果如下:\nThis word is bold. This word is italic.\n#区块标签 区块元素──比如 \u0026lt;div\u0026gt;、\u0026lt;table\u0026gt;、\u0026lt;pre\u0026gt;、\u0026lt;p\u0026gt; 等标签，必须在前后加上空行，以便于内容区分。而且这些元素的开始与结尾标签，不可以用 tab 或是空白来缩进。Markdown 会自动识别这区块元素，避免在区块标签前后加上没有必要的 \u0026lt;p\u0026gt; 标签。\n例如，在 Markdown 文件里加上一段 HTML 表格：\n1 2 3 4 5 6 7 8 9 This is a regular paragraph. \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Foo\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; This is another regular paragraph. 请注意，Markdown 语法在 HTML 区块标签中将不会被进行处理。例如，你无法在 HTML 区块内使用 Markdown 形式的*强调*。\n#HTML 用法最佳实践 出于安全原因，并非所有 Markdown 应用程序都支持在 Markdown 文档中添加 HTML。如有疑问，请查看相应 Markdown 应用程序的手册。某些应用程序只支持 HTML 标签的子集。\n对于 HTML 的块级元素 \u0026lt;div\u0026gt;、\u0026lt;table\u0026gt;、\u0026lt;pre\u0026gt; 和 \u0026lt;p\u0026gt;，请在其前后使用空行（blank lines）与其它内容进行分隔。尽量不要使用制表符（tabs）或空格（spaces）对 HTML 标签做缩进，否则将影响格式。\n在 HTML 块级标签内不能使用 Markdown 语法。例如 \u0026lt;p\u0026gt;italic and **bold**\u0026lt;/p\u0026gt; 将不起作用。\n","date":"2024-05-11T00:00:00Z","image":"https://yanbin582.github.io/p/markdown_grammar/mark_hu17144337700073756952.png","permalink":"https://yanbin582.github.io/p/markdown_grammar/","title":"Markdown_Grammar"}]